{"version":3,"sources":["components/Field.js","App.js","index.js"],"names":["Field","props","state","userName","randomCell","color","settings","results","modes","mode","field","cols","user","computer","play","winner","button","handleChange","bind","check","timeout","saveResult","axios","get","then","res","data","setState","Object","keys","e","this","target","name","value","i","push","closest","getAttribute","clearTimeout","time","setTimeout","delay","row","Math","floor","random","col","self","post","date","Date","substring","indexOf","response","pow","id","FormControl","Select","native","onChange","inputProps","size","map","item","key","TextField","label","style","width","Button","disabled","variant","onClick","restart","data-picked","backgroundColor","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09fb0d2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nexport class Field extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            userName: '',\r\n            randomCell: '',\r\n            color: '#fff',\r\n            settings: [],\r\n            results: [],\r\n            modes: [],\r\n            mode: 'easyMode',\r\n            field: 5,\r\n            cols: [1, 2, 3, 4, 5],\r\n            user: 0,\r\n            computer: 0,\r\n            play: '',\r\n            winner: '',\r\n            button: 'Play'\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.play = this.play.bind(this)\r\n        this.check = this.check.bind(this)\r\n        this.timeout = this.timeout.bind(this)\r\n        this.winner = this.winner.bind(this)\r\n        this.saveResult = this.saveResult.bind(this)\r\n    }\r\n\r\n    //Fetching game setting and winners list\r\n    componentDidMount() {\r\n        axios.get(`https://starnavi-frontend-test-task.herokuapp.com/game-settings`)\r\n            .then(res => {\r\n                const settings = res.data;\r\n                this.setState({ settings: settings, modes: Object.keys(settings) });\r\n            });\r\n        axios.get(`https://starnavi-frontend-test-task.herokuapp.com/winners`)\r\n            .then(res => {\r\n                const results = res.data;\r\n                this.setState({ results: results })\r\n            });\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value }, () => {\r\n            if (this.state.mode) {\r\n                this.setState({ field: this.state.settings[this.state.mode].field, color: '#fff' }, function () {\r\n                    let cols = [];\r\n                    if (cols) {\r\n                        for (let i = 1; i <= this.state.field; i++) {\r\n                            cols.push(i)\r\n                        }\r\n                        this.setState({ cols: cols })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // Function for result setting after clicking on specific cell \r\n    check(e) {\r\n        if (!this.state.play && this.state.randomCell !== '') {\r\n            if (e.target.closest('td')) {\r\n                if (e.target.getAttribute('data-picked')) {\r\n                    clearTimeout(this.time)\r\n                    this.setState({ color: 'green', user: this.state.user + 1, play: true }, () => {\r\n                        if (this.state.winner === '') {\r\n                            setTimeout(() => { this.play() }, 1000)\r\n                        }\r\n                        this.winner();\r\n                    })\r\n                } else {\r\n                    clearTimeout(this.time)\r\n                    this.setState({ color: 'red', computer: this.state.computer + 1, play: true }, () => {\r\n                        this.winner();\r\n                        if (this.state.winner === '') {\r\n                            setTimeout(() => { this.play(); }, 1000)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // setting timeout which is installed by mode difficulty\r\n    timeout() {\r\n        this.time = setTimeout(() => {\r\n            this.setState({ color: 'red', computer: this.state.computer + 1, play: true }, () => {\r\n                this.winner();\r\n                if (this.state.winner === '') {\r\n                    setTimeout(() => { this.play(); }, 1000)\r\n                }\r\n            })\r\n        }, this.state.settings[this.state.mode].delay);\r\n    }\r\n    // Continous generating of random cell until the winner is choosen\r\n    play() {\r\n        clearTimeout(this.time)\r\n        if (this.state.winner === '') {\r\n            const row = Math.floor(Math.random() * this.state.field) + 1;\r\n            const col = Math.floor(Math.random() * this.state.field) + 1;\r\n            this.setState({ randomCell: row + '' + col, color: 'blue', play: false })\r\n            this.timeout();\r\n        }\r\n    }\r\n    // Restarting the game\r\n    restart() {\r\n        if (this.state.winner !== '') {\r\n            this.setState({ winner: '', button: 'Play' }, () => {\r\n                const row = Math.floor(Math.random() * this.state.field) + 1;\r\n                const col = Math.floor(Math.random() * this.state.field) + 1;\r\n                this.setState({ randomCell: row + '' + col, color: 'blue', play: false })\r\n                this.timeout();\r\n            })\r\n        }\r\n    }\r\n\r\n    // Posting game result on server and fetching the whole list of winners\r\n    saveResult() {\r\n        let self = this;\r\n        axios.post('https://starnavi-frontend-test-task.herokuapp.com/winners', {\r\n            winner: this.state.winner,\r\n            date: Date().substring(0, Date().indexOf('GMT'))\r\n        })\r\n            .then(function (response) {\r\n                self.setState({ results: response.data })\r\n            })\r\n    }\r\n\r\n    // Picking winner (whether someone reached score > 50% of field)\r\n    winner() {\r\n        if (this.state.computer >= Math.pow(this.state.field, 2) / 2) {\r\n            this.setState({ winner: 'Computer', button: 'Play again', user: 0, computer: 0 }, () => {\r\n                this.saveResult();\r\n            })\r\n        } else if (this.state.user >= Math.pow(this.state.field, 2) / 2) {\r\n            this.setState({ winner: this.state.userName, button: 'Play again', user: 0, computer: 0 }, () => {\r\n                this.saveResult();\r\n            })\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"main\">\r\n                <div id=\"main-container\">\r\n                    <div id=\"controllers\">\r\n                        <FormControl>\r\n                            <Select\r\n                                native\r\n                                value={this.state.mode}\r\n                                onChange={this.handleChange}\r\n                                inputProps={{\r\n                                    name: 'mode',\r\n                                    id: 'mode-picker',\r\n                                }}\r\n                                size=\"large\"\r\n                            >\r\n                                {this.state.modes.map(item => {\r\n                                    return <option key={item} value={item}>{item}</option>\r\n                                })}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <TextField id=\"standard-basic\" label=\"Enter Name\" name=\"userName\" value={this.state.userName} onChange={this.handleChange} style={{ width: '130px' }} />\r\n\r\n                        {/* Change buttons */}\r\n                        {(this.state.button === 'Play') ?\r\n                            <Button name={this.state.button} disabled={(this.state.userName !== '') ? false : true} variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.play}>\r\n                                {this.state.button}\r\n                            </Button> :\r\n                            <Button name={this.state.button} variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.restart.bind(this)}>\r\n                                {this.state.button}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Winner choosen! */}\r\n                    {(this.state.winner !== '') ? <h1 style={{ color: '#fff' }}>{this.state.winner} won</h1> : null}\r\n\r\n                    <div id=\"field\">\r\n                        <table>\r\n                            <tbody>\r\n                                {this.state.cols.map((row) => {\r\n                                    return <tr key={row}>{this.state.cols.map((col) => {\r\n                                        // Checking whether random cell was set\r\n                                        return (this.state.randomCell === (row + '' + col)) ? <td key={row + '' + col} data-picked=\"picked\" style={{ backgroundColor: this.state.color }} onClick={this.check}></td> : <td key={row + '' + col} onClick={this.check}></td>\r\n                                    })}</tr>\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                        <p>Computer: {this.state.computer}</p>\r\n                        <p>User: {this.state.user}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"results\">\r\n                    {this.state.results.map((item) => {\r\n                        return <h4 key={item.id}>Winner: {item.winner} ---- Date: {item.date}</h4>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Field\r\n","import React, { Component } from 'react'\n\nimport Field from './components/Field'\n\nimport './App.scss';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div id=\"App\">\n        <Field />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}